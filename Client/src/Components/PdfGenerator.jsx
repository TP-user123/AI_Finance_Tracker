import jsPDF from "jspdf";
import autoTable from "jspdf-autotable";

// Format date as: 17 Jul 2025
const formatDate = (rawDate) => {
  const date = new Date(rawDate);
  return date.toLocaleDateString("en-GB", {
    day: "2-digit",
    month: "short",
    year: "numeric",
  });
};

// Format amount: â‚¹ 12,345.67
const formatAmount = (num) => {
  return (num);
};

export const exportToPDF = (data) => {
  const doc = new jsPDF();

  // Get user name from localStorage (fallback to "User")
const userString = localStorage.getItem("user");
const username = userString ? JSON.parse(userString) : { name: "Unknown" };


  const now = new Date();
  const formattedDate = now.toLocaleString("en-GB", {
    dateStyle: "medium",
    timeStyle: "short",
  });

  // PDF Header
  doc.setFontSize(16);
  doc.text("Transaction Report", 14, 15);

  doc.setFontSize(11);
 doc.text(`Generated by: ${username.name}`, 14, 22);
  doc.text(`Generated on: ${formattedDate}`, 14, 28);

  // Table rows & totals
  let totalIncome = 0;
  let totalExpense = 0;

  const tableData = data.map((txn) => {
    const amount = parseFloat(txn.amount);
    if (txn.type === "credit") totalIncome += amount;
    else totalExpense += amount;

    return [
      formatDate(txn.date),
      txn.category,
      { content: formatAmount(amount), styles: { halign: "right" } },
      txn.type.charAt(0).toUpperCase() + txn.type.slice(1),
      txn.description || "-",
    ];
  });

  // Generate the table
  autoTable(doc, {
    startY: 35,
    head: [["Date", "Category", "Amount", "Type", "Description"]],
    body: tableData,
    styles: {
      fontSize: 11,
      cellPadding: 4,
    },
    headStyles: {
      fillColor: [41, 128, 185],
      textColor: 255,
      fontStyle: "bold",
    },
    alternateRowStyles: {
      fillColor: [245, 245, 245],
    },
    margin: { left: 14, right: 14 },
    theme: "striped",
  });

  // Add totals below the table
  const finalY = doc.lastAutoTable.finalY + 10;
  doc.setFontSize(12);
  doc.setFont("helvetica", "bold");
  doc.text(`Total Income: ${formatAmount(totalIncome)}`, 14, finalY);
  doc.text(`Total Expense: ${formatAmount(totalExpense)}`, 14, finalY + 7);

  // Save the file
  doc.save("transactions.pdf");
};
